version: "3.8"

services:
  ghost:
    image: ghost:5-alpine
    container_name: ghost
    restart: always
    ports:
      - 2368:2368
    environment:
      # see https://ghost.org/docs/config/#configuration-options
      # database
      database__client: mysql
      database__connection__host: db
      database__connection__user: root
      # database__connection__password: example
      database__connection__database: ghost
      # mail
      mail__transport: "SMTP"
      mail__options__service: "Gmail"
      mail__options__host: "smtp.gmail.com"
      mail__options__port: "465"
      mail__options__secureConnection: "true"
      # mail__options__auth__user: "example"
      # mail__options__auth__pass: "password1234"
      # this url value is just an example, and is likely wrong for your environment!
      url: https://atherantimes.com
      # contrary to the default mentioned in the linked documentation, this image defaults to NODE_ENV=production (so development mode needs to be explicitly specified if desired)
      # NODE_ENV: development
    env_file:
      - .env
    volumes:
      - ghostdata:/var/lib/ghost/content
    depends_on:
      - db
    networks:
      - database
      - frontend
    labels:
      # enables auto updates
      com.centurylinklabs.watchtower.enable: true

      # enable traefik
      traefik.enable: "true"

      # set host
      traefik.http.routers.ghost.rule: "Host(`atherantimes.com`)"
      # set port
      traefik.http.services.ghost.loadbalancer.server.port: "2368"

      # compression
      traefik.http.middlewares.test-compress.compress: true

      # rate limiting
      traefik.http.middlewares.test-ratelimit.ratelimit.average: 100
      traefik.http.middlewares.test-ratelimit.ratelimit.burst: 50

      # network traefik uses to access service
      traefik.docker.network: "backend_frontend"

      # https stuff
      traefik.http.routers.ghost.entrypoints: "websecure"
      traefik.http.routers.ghost.tls.certresolver: "myresolver"

  db:
    image: mysql:8.0
    restart: always
    # environment:
    #   MYSQL_ROOT_PASSWORD: example
    env_file:
      - .env
    volumes:
      - mysqldata:/var/lib/mysql
    networks:
      - database

  umami:
    image: ghcr.io/mikecao/umami:mysql-latest
    # ports:
    #   - "3000:3000"
    environment:
      # DATABASE_URL: mysql://username:mypassword@localhost:3306/mydb
      DATABASE_TYPE: mysql
      # HASH_SALT: replace-me-with-a-random-string
      HOSTNAME: test.atherantimes.com
    env_file:
      - .env
    depends_on:
      - db
    restart: always
    networks:
      - database
      - frontend
    labels:
      # enables auto updates
      com.centurylinklabs.watchtower.enable: true

      # enable traefik
      traefik.enable: "true"

      # set host
      traefik.http.routers.umami.rule: "Host(`test.atherantimes.com`)"
      # set port
      traefik.http.services.umami.loadbalancer.server.port: "3000"

      # compression
      traefik.http.middlewares.test-compress.compress: true

      # # rate limiting
      # traefik.http.middlewares.test-ratelimit.ratelimit.average: 100
      # traefik.http.middlewares.test-ratelimit.ratelimit.burst: 50

      # network traefik uses to access service
      traefik.docker.network: "backend_frontend"

      # https stuff
      traefik.http.routers.umami.entrypoints: "websecure"
      traefik.http.routers.umami.tls.certresolver: "myresolver"

  redirect:
    image: ghcr.io/huskydog9988/simple-redirect:1.0
    container_name: redirect
    restart: always
    environment:
      REDIRECT_To: "https://atherantimes.com"
    networks:
      - frontend
    labels:
      # enables auto updates
      com.centurylinklabs.watchtower.enable: true

      # enable traefik
      traefik.enable: "true"

      # set host
      traefik.http.routers.redirect.rule: "Host(`www.atherantimes.com`)"
      # set port
      traefik.http.services.redirect.loadbalancer.server.port: "3000"

      # compression
      traefik.http.middlewares.test-compress.compress: true

      # rate limiting
      traefik.http.middlewares.test-ratelimit.ratelimit.average: 100
      traefik.http.middlewares.test-ratelimit.ratelimit.burst: 50

      # network traefik uses to access service
      traefik.docker.network: "backend_frontend"

      # https stuff
      traefik.http.routers.redirect.entrypoints: "websecure"
      traefik.http.routers.redirect.tls.certresolver: "myresolver"

  crowdsec:
    image: crowdsecurity/crowdsec
    container_name: crowdsec
    environment:
      GID: "1000"
      UID: "1000"
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/whitelist-good-actors"
      CUSTOM_HOSTNAME: "Atheran Times"
    volumes:
      - crowdsecconfig:/etc/crowdsec
      - crowdsecdb:/var/lib/crowdsec/data/
      - /var/log/traefik:/var/log/traefik/:ro
      - /var/log/anaconda:/var/log/anaconda/:ro
    networks:
      - crowdsec
    restart: always
    security_opt:
      - no-new-privileges=true
    labels:
      # enables auto updates
      com.centurylinklabs.watchtower.enable: true

  # entry point to every app
  traefik:
    container_name: traefik
    # The official v2 Traefik docker image
    image: traefik:v2.7
    restart: always
    # Enables the web UI and tells Traefik to listen to docker
    command:
      # logs
      - "--log.filePath=/var/log/traefik/traefik.log"
      - "--log.format=json"
      # need debug for crowdsec
      - "--log.level=DEBUG"

      # pilot token for web dashboard
      - --pilot.token=${TRAEFIK_PILOT_TOKEN}

      # hub stuff
      - --experimental.hub=true
      - --hub.tls.insecure=true

      # metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addrouterslabels=true

      # api
      - "--api.insecure=true"

      # provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      # entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # http to https redirect
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"

      # https stuff

      # set to http challange
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      # make web entry point for challenge
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      # acme server for testing
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # email
      - "--certificatesresolvers.myresolver.acme.email=acme@atherantimes.com"
      # path to config file
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      # The HTTP port
      - "80:80"
      # HTTPS
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
      # traefik log
      - /var/log/traefik:/var/log/traefik
    networks:
      - frontend
    labels:
      com.centurylinklabs.watchtower.enable: true

  hub-agent:
    container_name: hub-agent
    image: ghcr.io/traefik/hub-agent-traefik:v0.7.0
    restart: always
    command:
      - run
      - --auth-server.advertise-url=http://hub-agent
      - --hub.token=${TRAEFIK_HUB_TOKEN}
      - --traefik.host=traefik
      - --traefik.tls.insecure=true
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend

  # auto updates containers
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - /root/.docker/config.json:/config.json
    environment:
      # set containers timezone
      TZ: "America/New_York"
      WATCHTOWER_CLEANUP: "true"
      # requires label to auto update containers
      WATCHTOWER_LABEL_ENABLE: "true"
      # WATCHTOWER_POLL_INTERVAL: 21600
      # update at 3 am
      WATCHTOWER_SCHEDULE: "0 0 3 * * *"
    labels:
      com.centurylinklabs.watchtower.enable: true

networks:
  frontend:
  database:
  crowdsec:

volumes:
  ghostdata:
  mysqldata:
  crowdsecdb:
  crowdsecconfig:
