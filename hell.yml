version: "3.8"

volumes:
  mariadb-data:
  ghost-data:
  portainer_data:
  db-data:
  event-data:
  geoip:
  nextcloud:

# networks:
#   frontend:
#   backend:

services:
  # cms
  ghost:
    image: ghost:4-alpine
    # container_name: ghost
    restart: always
    volumes:
      # make ghost stateful
      - ghost-data:/var/lib/ghost/content
    ports:
      - 2368:2368
    environment:
      # see https://ghost.org/docs/config/#configuration-options
      database__client: mysql
      database__connection__host: db
      database__connection__user: root
      # database__connection__password: example
      database__connection__database: ghost
      # this url value is just an example, and is likely wrong for your environment!
      url: https://ghost.atherantimes.com/
      # contrary to the default mentioned in the linked documentation, this image defaults to NODE_ENV=production (so development mode needs to be explicitly specified if desired)
      #NODE_ENV: development
    env_file:
      - config.env
    # networks:
    #   - frontend
    #   - backend
    labels:
      # enables auto updates
      com.centurylinklabs.watchtower.enable: true

      # enable traefik
      traefik.enable: "true"

      traefik.http.routers.ghost.rule: "Host(`ghost.atherantimes.com`)"
      traefik.http.services.ghost.loadbalancer.server.port: "2368"
      traefik.http.routers.ghost.entrypoints: "websecure"
      traefik.http.routers.ghost.tls.certresolver: "myresolver"

    # set containers required by ghost
    depends_on:
      - db

  # db for cms
  db:
    image: mariadb:10.5
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    # container_name: mariadb
    restart: always
    volumes:
      - mariadb-data:/var/lib/mysql
    # environment:
    #   MYSQL_ROOT_PASSWORD: example
    env_file:
      - config.env
    # networks:
    #   - backend
    labels:
      # enables auto updates
      com.centurylinklabs.watchtower.enable: true

  nextcloud:
    image: nextcloud:apache
    restart: always
    ports:
      - 5643:80
    depends_on:
      - db
      - redis
    volumes:
      - nextcloud:/var/www/html
    environment:
     # - MYSQL_PASSWORD=
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=root
      - MYSQL_HOST=db
     # - NEXTCLOUD_TRUSTED_DOMAINS=
      - REDIS_HOST=redis
      # Trusted domain should be the same as your nextcloud domain
      - NEXTCLOUD_TRUSTED_DOMAINS=cnc.cdm-gov.com
#       - OVERWRITEHOST=reverse-proxy
#       - TRUSTED_PROXIES=
    env_file:
      - config.env
    labels:
      # enables auto updates
      com.centurylinklabs.watchtower.enable: true
      
      # enable traefik
      traefik.enable: "true"

      traefik.http.routers.nextcloud.rule: "Host(`cnc.cdm-gov.com`)"
      traefik.http.services.nextcloud.loadbalancer.server.port: "5643"
      traefik.http.routers.nextcloud.entrypoints: "websecure"
      traefik.http.routers.nextcloud.tls.certresolver: "myresolver"
      
#       caldav redirect thing
      traefik.http.middlewares.nextcloud-caldav.redirectregex.permanent: true
      traefik.http.middlewares.nextcloud-caldav.redirectregex.regex: "^https://(.*)/.well-known/(card|cal)dav"
      traefik.http.middlewares.nextcloud-caldav.redirectregex.replacement: "https://$${1}/remote.php/dav/"
      traefik.http.routers.nextcloud.middlewares: "nextcloud-caldav@docker"
  
  nextcloud-cron:
    image: nextcloud:apache
    restart: always
    volumes:
      - nextcloud:/var/www/html
    entrypoint: /cron.sh
    labels:
      # enables auto updates
      com.centurylinklabs.watchtower.enable: true
    depends_on:
      - db
      - redis
  
  redis:
    image: redis
    restart: always
    labels:
      # enables auto updates
      com.centurylinklabs.watchtower.enable: true
    

  # auto updates containers
  watchtower:
    image: containrrr/watchtower
    # container_name: watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - /root/.docker/config.json:/config.json
    environment:
      # set containers timezone
      TZ: "America/New_York"
      WATCHTOWER_CLEANUP: "true"
      # requires label to auto update containers
      WATCHTOWER_LABEL_ENABLE: "true"
      # WATCHTOWER_POLL_INTERVAL: 21600
      # update at 3 am
      WATCHTOWER_SCHEDULE: "0 0 3 * * *"
    labels:
      com.centurylinklabs.watchtower.enable: true

  # entry point to every app
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.4
    restart: always
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"

      # https stuff

      # set to http challange
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      # make web entry point for challenge
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      # acme server for testing
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # email
      - "--certificatesresolvers.myresolver.acme.email=acme@atherantimes.com"
      # path to config file
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      # The HTTP port
      - "80:80"
      # HTTPS
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    # networks:
    #   - frontend

  portainer:
    image: portainer/portainer-ce
    # command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    # networks:
    #   - agent_network
    #   - proxy-net
    environment:
      TZ: "America/New_York"
    restart: always
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`example.com`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  mail:
    image: bytemark/smtp
    restart: always

  geoip:
    image: maxmindinc/geoipupdate
    environment:
      - GEOIPUPDATE_EDITION_IDS=GeoLite2-Country
      - GEOIPUPDATE_FREQUENCY=168 # update every 7 days
    env_file:
      - geo.env
    volumes:
      - geoip:/usr/share/GeoIP

  plausible_db:
    image: postgres:12
    restart: always
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=plausible
    # env_file:
    #   - plausible.env
    # networks:
    #   - backend

  plausible_events_db:
    image: yandex/clickhouse-server:21.3.2.5
    volumes:
      - event-data:/var/lib/clickhouse
      - ./plausible/clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.d/logging.xml:ro
      - ./plausible/clickhouse/clickhouse-user-config.xml:/etc/clickhouse-server/users.d/logging.xml:ro
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    # networks:
    #   - backend
    restart: always

  plausible:
    image: plausible/analytics:latest
    command: sh -c "sleep 10 && /entrypoint.sh db createdb && /entrypoint.sh db migrate && /entrypoint.sh db init-admin && /entrypoint.sh run"
    depends_on:
      - mail
      - geoip
      - plausible_db
      - plausible_events_db
    env_file:
      - plausible.env
    # networks:
    #   - backend
    #   - frontend
    environment:
      GEOLITE2_COUNTRY_DB: "/geoip/GeoLite2-Country.mmdb"
      # DATABASE_URL: "postgres://plausible_db:5432/plausible_dev"
      CLICKHOUSE_DATABASE_URL: "http://plausible_events_db:8123/plausible_events_db"
    volumes:
      - geoip:/geoip:ro
    restart: always
    labels:
      # enable traefik
      traefik.enable: "true"

      traefik.http.routers.plausible.rule: "Host(`plausible.atherantimes.com`)"
      traefik.http.services.plausible.loadbalancer.server.port: "8000"
      traefik.http.routers.plausible.entrypoints: "websecure"
      traefik.http.routers.plausible.tls.certresolver: "myresolver"
